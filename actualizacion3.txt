patches-own [
  chemical             ;; amount of chemical on this patch
  food                 ;; amount of food on this patch (0, 1, or 2)
  nest?                ;; true on nest patches, false elsewhere
  nest-scent           ;; number that is higher closer to the nest
  food-source-number   ;; number (1, 2, or 3) to identify the food sources
]

;;;;;;;;;;;;;;;;;;;;;;;;
;;; Setup procedures ;;;
;;;;;;;;;;;;;;;;;;;;;;;;

to setup
  clear-all
  set-default-shape turtles "bug"
  ;; Crear tortugas y asignarles colores basados en su colmena de origen
  let upper-nest-patches patches with [distancexy max-pxcor max-pycor < 5]
  let lower-nest-patches patches with [distancexy min-pxcor min-pycor < 5]
  let upper-nest-turtles ceiling (population / 2)
  let lower-nest-turtles floor (population / 2)
  create-turtles upper-nest-turtles
  [ 
    set size 2         ;; hacerlo más visible
    set color red
    move-to one-of upper-nest-patches
  ]
  create-turtles lower-nest-turtles
  [
    set size 2
    set color blue
    move-to one-of lower-nest-patches
  ]
  setup-patches
  reset-ticks
end

to setup-patches
  ask patches
  [ setup-nest
    setup-food
    recolor-patch ]
end

to setup-nest  ;; procedimiento de parche
  ;; establecer la variable nest? en verdadero dentro de las colmenas, falso en otros lugares
  set nest? (distancexy max-pxcor max-pycor) < 5 or (distancexy min-pxcor min-pycor) < 5
  ;; distribuir el olor a la colmena por todo el mundo, más intenso cerca de las colmenas
  let distances-to-nests (list (distancexy max-pxcor max-pycor) (distancexy min-pxcor min-pycor))
  set nest-scent 200 - min distances-to-nests
end


to setup-food  ;; procedimiento de parche
  ;; colocar las fuentes de comida más dispersas
  if (distancexy 13 13) < 5
  [ set food-source-number 1 ]
  if (distancexy -13 -13) < 5
  [ set food-source-number 2 ]
  if (distancexy -13 13) < 5
  [ set food-source-number 3 ]
  if (distancexy 13 -13) < 5
  [ set food-source-number 4 ]
  if (distancexy 20 0) < 5
  [ set food-source-number 5 ]
  if (distancexy -20 0) < 5
  [ set food-source-number 6 ]
  ;; distribuir comida aleatoriamente de 1 o 2 en todas las fuentes de comida
  if food-source-number > 0
  [ set food one-of [1 2] ]
end


to recolor-patch  ;; procedimiento de parche
  ;; dar color a las colmenas y las fuentes de comida
  ifelse nest?
  [ if any? patches with [distancexy max-pxcor max-pycor < 5]
    [ set pcolor violet ]
    if any? patches with [distancexy min-pxcor min-pycor < 5]
    [ set pcolor pink ] ]
  [ ifelse food > 0
    [ if food-source-number = 1 [ set pcolor cyan ]
      if food-source-number = 2 [ set pcolor sky  ]
      if food-source-number = 3 [ set pcolor blue ]
      if food-source-number = 4 [ set pcolor magenta ]
      if food-source-number = 5 [ set pcolor yellow ]
      if food-source-number = 6 [ set pcolor red ] ]
    ;; escalar el color para mostrar la concentración química
    [ set pcolor scale-color green chemical 0.1 5 ] ]
end
;;;;;;;;;;;;;;;;;;;;;
;;; Go procedures ;;;
;;;;;;;;;;;;;;;;;;;;;

to go  ;; forever button
  ask turtles
  [ if who >= ticks [ stop ] ;; delay initial departure
    ifelse color = red
    [ look-for-food  ]       ;; not carrying food? look for it
    [ return-to-nest ]       ;; carrying food? take it back to nest
    wiggle
    fd 1 ]
  diffuse chemical (diffusion-rate / 100)
  ask patches
  [ set chemical chemical * (100 - evaporation-rate) / 100  ;; slowly evaporate chemical
    recolor-patch ]
  tick
end

to return-to-nest  ;; turtle procedure
  ifelse nest?
  [ ;; drop food and head out again
    if color = red
    [ set color red ]
    if color = blue
    [ set color blue ]
    rt 180 ]
  [ set chemical chemical + 60  ;; drop some chemical
    ifelse color = red
    [ uphill-nest-scent ]         ;; head toward the greatest value of nest-scent
    [ uphill-nest-scent-blue ] ]
end

to look-for-food  ;; turtle procedure
  if food > 0
  [ if color = red
    [ set color orange + 1 ]     ;; pick up food
    if color = blue
    [ set color turquoise ]
    set food food - 1        ;; and reduce the food source
    rt 180                   ;; and turn around
    stop ]
  ;; go in the direction where the chemical smell is strongest
  if (chemical >= 0.05) and (chemical < 2)
  [ ifelse color = red
    [ uphill-chemical ]
    [ uphill-chemical-blue ] ]
end

to uphill-nest-scent-blue  ;; turtle procedure
  let scent-ahead nest-scent-at-angle   0
  let scent-right nest-scent-at-angle  45
  let scent-left  nest-scent-at-angle -45
  if (scent-right > scent-ahead) or (scent-left > scent-ahead)
  [ ifelse scent-right > scent-left
    [ rt 45 ]
    [ lt 45 ] ]
end

to uphill-chemical-blue  ;; turtle procedure
  let scent-ahead chemical-scent-at-angle   0
  let scent-right chemical-scent-at-angle  45
  let scent-left  chemical-scent-at-angle -45
  if (scent-right > scent-ahead) or (scent-left > scent-ahead)
  [ ifelse scent-right > scent-left
    [ rt 45 ]
    [ lt 45 ] ]
end

;; sniff left and right, and go where the strongest smell is
to uphill-chemical  ;; turtle procedure
  let scent-ahead chemical-scent-at-angle   0
  let scent-right chemical-scent-at-angle  45
  let scent-left  chemical-scent-at-angle -45
  if (scent-right > scent-ahead) or (scent-left > scent-ahead)
  [ ifelse scent-right > scent-left
    [ rt 45 ]
    [ lt 45 ] ]
end

;; sniff left and right, and go where the strongest smell is
to uphill-nest-scent  ;; turtle procedure
  let scent-ahead nest-scent-at-angle   0
  let scent-right nest-scent-at-angle  45
  let scent-left  nest-scent-at-angle -45
  if (scent-right > scent-ahead) or (scent-left > scent-ahead)
  [ ifelse scent-right > scent-left
    [ rt 45 ]
    [ lt 45 ] ]
end

to wiggle  ;; turtle procedure
  rt random 40
  lt random 40
  if not can-move? 1 [ rt 180 ]
end

to-report nest-scent-at-angle [angle]
  let p patch-right-and-ahead angle 1
  if p = nobody [ report 0 ]
  report [nest-scent] of p
end

to-report chemical-scent-at-angle [angle]
  let p patch-right-and-ahead angle 1
  if p = nobody [ report 0 ]
  report [chemical] of p
end